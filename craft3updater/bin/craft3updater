# !/bin/bash

# print help
print_help() {
    echo "
 __________________________
< Welcome to Craft3updater >
 --------------------------
    \   ^__^
     \  (oo)\_______
        (__)\       )\/\\
            ||----w |
            ||     ||
    
Craft3updater is a command-line tool for updating Craft CMS 3 websites. This tool is not advised to be used with critical updates such as 3.5 -> 3.6. If any help is needed or issues are spotted, feel free to report them at https://github.com/Andycko/Craft-3-Automated-Update-Script/issues .

Usage: craft3updater [<options>] <directory_name>
Options:
    -h      Displays this help message

    
Thanks for using Craft3updater!
"
}

# save logfile path and append timestamp to logfile
LOG=$(pwd)/updater.log.out
echo "" >> $LOG
echo "============================" >> $LOG
echo "[$(date)]" >> $LOG

# directory where all websites are located
PARENT=$(pwd)/*

while getopts 'h' flag; do
    case "${flag}" in
        h) print_help
           exit;;
        *) print_help
           exit;;
    esac
done

# Updates directory that is passed to it as $1
do_update() {
    directory=$1
    DIR=$(basename "$directory")

    # continue if log file reached
    if [[ $DIR == "updater.log.out" ]]; then continue; fi

    # Check if entry is a directory
    if ! [[ -d "$directory" ]]; then
        echo "\"$DIR\" is not a directory, skipping entry."
        echo ""
        continue
    fi  
    cd "$directory"

    # Check if entry is a craft project
    if ! [ -f "craft" ]; then
        echo "\"$DIR\" is not a Craft CMS application, skipping entry."
        echo ""
        continue
    fi

    # Ask for confirmation to update entry
    read -p "Update \"$DIR\"? [yes|no]: " UPDATE
    if ! ( [[ $UPDATE == "yes" ]] || [[ $UPDATE == "y" ]] ); then
        echo "Skipping entry \"$DIR\"."
        echo ""
        continue
    fi

    # Check if git working tree is clean
    TMP=`git status -s`
    if ! [ -z "$TMP" ]; then
        echo "Working tree is not clean, please save work before updating."
        read -p "Ready to continue or skip? [continue|skip]: " TMP
        if [[ TMP == "skip" ]] || [[ TMP == "s" ]]; then
            echo ""
            continue
        fi
    fi

    echo "Updating entry \"$DIR\"."

    # check if git branch is master, if yes give warning & terminate
    git_branch() {
        git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
    }
    BRANCHNAME="XXXXXXXXXX"
    BRANCH=$git_branch
    while [[ BRANCHNAME != BRANCH ]] ; do
        read -p "Enter the name of the branch to update: " BRANCHNAME;
        if git branch | grep -E "\b$BRANCHNAME\b" > /dev/null; then
            git checkout $BRANCHNAME >> $LOG 2>> $LOG
            break; 
        fi
        echo "The entered branch does not exist."
    done

    echo -ne "\r[=>      ] - Updating git repo               " # progress progress bar

    git pull >> $LOG 2>> $LOG
    
    echo -ne "\r[==>     ] - Installing composer dependencies" # progress progress bar

    # composer install without any output and user interactions
    composer install >> $LOG 2>> $LOG

    echo -ne "\r[===>    ] - Updating plugins & CMS          " # progress progress bar

    while ./craft update | grep - > /dev/null 2> /dev/null ; do 
        ./craft update/update all -f --backup 0 --interactive 0 >> $LOG 2>> $LOG;
    done

    echo -ne "\r[====>   ] - Adding changes to git           " # progress progress bar

    # add updated files
    git add . >> $LOG 2>> $LOG

    echo -ne "\r[=====> ] - Commiting changes to git         " # progress progress bar

    git commit -m "Updated Craft CMS & Plugins" >> $LOG 2>> $LOG

    echo -ne "\r[======> ] - Pushing changes to git          " # progress progress bar

    if git push >> $LOG 2>> $LOG; then

        echo -ne "\r[=======>] - Update Done.                " # progress progress bar

        echo ""
        echo "******************************"
        echo "  ${DIR} is updated"
        echo "******************************"
        echo ""
    else
        echo ""
        echo " -------------------"
        echo "|  GIT PUSH failed  |"
        echo " -------------------"
        echo ""
        echo "For more information see script logs in $LOG."
    fi
}

if ! [ -z ${@:$OPTIND:1} ]; then
    # Update only one webpage passed to it as argument
    do_update ${@:$OPTIND:1}
else
    # looping through the parent directory to see all subdirectories
    for directory in $PARENT; do
        do_update $directory
    done
fi